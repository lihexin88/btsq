<?php

namespace app\api\controller;

use app\api\model\Currency;
use app\api\model\Language;
use app\api\model\UserContribution;
use app\api\model\Trade;
use app\api\model\UserPay;
use app\common\controller\ApiBase;
use think\Session;
use think\Request;
use think\Db;
use think\Validate;
use app\api\model\CurrencyArea;
use app\api\model\Order;

/**
 * 交易页面功能
 *
 * @remark
 */
class Transaction extends ApiBase
{

    public $all_time = 0;

    /**
     * 获取订单链表
     * @throws \think\exception\DbException
     */
    public function show_list()
    {
        $first = config("FIRST_BUY_ID");
        Db::listen(function ($sql, $time) {
//            echo $sql . "  time:[" . $time . "]<br>";
            $this->all_time += $time;
        });
        $first = Trade::get(['id' => $first]);
        Trade::get_link_list($first);
        echo "all" . $this->all_time;
    }


    /**
     * 获取用户插队百分比
     * @throws \think\exception\DbException
     */
    public function get_step()
    {
        $step = UserContribution::get_position_percent($this->userInfo);
        return $step;
    }


    public function sss()
    {
        $step = $this->get_step();
        $position = $this->get_insert_position(1, $step);
        $r = Trade::insert_trade($position, 1,1);
        if ($r) {
            return rtn(1, "插入成功");
        }

    }


    /**
     * @param $trade_type 交易类型
     * @param $percent 插队百分比
     * @return Trade|bool|float|null
     * @throws \think\exception\DbException
     */
    public function get_insert_position($trade_type, $percent)
    {
        $count = Trade::where(['trade_status' => 1, 'trade_type' => $trade_type])->count('id');
        $position = ceil($count * $percent);
        $position_obj = null;
        $first = config($trade_type == 2 ? "FIRST_BUY_ID" : "FIRST_SELL_ID");
        $first = Trade::get(['id' => $first]);
        $position = Trade::get_next($first, $position);
        return $position;
    }


    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 交易首页信息
     * @return false|string
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function get_info()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $index_result = $Trade->get_info($data);
            return $index_result;
        }
    }

    /**
     * 买入范围
     * @return false|string
     * @throws \think\exception\DbException
     */
    public function buy_range()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $range_result = $Trade->buy_range($data);
            return rtn(1, '', $range_result);
        }
    }

    /**
     * 买入总价
     * @return false|string
     */
    public function buy_total()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $total_result = $Trade->buy_total($data);
            return rtn(1, '', $total_result);
        }
    }

    /**
     * 最大可卖
     * @return false|string
     */
    public function max_sell_num()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $sell_result = $Trade->max_sell_num($data);
            return rtn(1, '', $sell_result);
        }
    }

    /**
     * 最大可卖提示
     * @return false|string
     * @throws \think\exception\DbException
     */
    public function max_sell_tips()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $user_info = $this->userInfo;
            $sell_result = $Trade->max_sell_tips($user_info);
            return rtn(1, '', $sell_result);
        }
    }

    /**
     * 卖出总价
     * @return false|string
     */
    public function sell_total()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $total_result = $Trade->sell_total($data);
            return rtn(1, '', $total_result);
        }
    }

    /**
     * 获取用户财务信息
     * @return false|string
     */
    public function get_user_finance()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $total_result = $Trade->get_user_finance($data);
            return rtn(1, '', $total_result);
        }
    }

    /**
     * 交易(挂买&挂卖)
     * @return false|string
     * @throws \think\exception\DbException
     */
    public function do_trade()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $trade_reault = $Trade->do_trade($data);
            return $trade_reault;
        }
        return false;
    }

    /**
     * 获取交易列表
     * @return false|string
     */
    public function trade_list()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $trade_reault = $Trade->trade_list($data);
            return $trade_reault;
        }
    }

    /**
     * 获取单笔挂单详情
     * @return array|false|\PDOStatement|string|\think\Model
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function trade_detail()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $detail_result = $Trade->trade_detail($data);
            return $detail_result;
        }
    }

    /**
     * 撤消挂单
     * @return \app\api\model\UserMoney|array|bool|false|\PDOStatement|string|\think\Model
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function cancel_trade()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $cancel_result = $Trade->cancel_trade($data);
            return $cancel_result;
        }
    }

    /**
     * 去支付信息
     * @return false|string
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function pay_info()
    {
        if (Request::instance()->isPost()) {
            $UserPay = new UserPay();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $pay_result = $UserPay->pay_info($data);
            if ($pay_result['code'] === 0) {
                return rtn(0, $pay_result['msg']);
            }
            return rtn(1, '', $pay_result['data']);
        }
    }

    /**
     * 执行支付
     * @return false|string
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function do_pay()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $result = $Trade->do_pay($data);
            if ($result['code'] === 0) {
                return rtn(0, $result['msg']);
            }
            return rtn(1, $result['msg'], '');
        }
    }

    /**
     * 执行已收款
     * @return false|string
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function do_done()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $result = $Trade->do_done($data);
            if ($result['code'] === 0) {
                return rtn(0, $result['msg']);
            }
            return rtn(1, $result['msg'], '');
        }
    }

    /**
     * 查看挂单完成详情
     * @return false|string
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function view_details()
    {
        if (Request::instance()->isPost()) {
            $Trade = new Trade();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $detail_result = $Trade->view_details($data);
            return $detail_result;
        }
    }

    /**
     * 交易记录
     * @return false|string
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function order_list()
    {
        if (Request::instance()->isPost()) {
            $Order = new Order();
            $data = [
                'user_info' => $this->userInfo,
                'data' => input('post.'),
            ];
            $order_result = $Order->order_list($data);
            if ($order_result['code'] === 0) {
                return rtn(0, $order_result['msg']);
            }
            return rtn(1, '', $order_result['data']);
        }
    }

    // 上传支付图片
    public function upload_pic()
    {
        if (Request::instance()->isPost()) {
            $type = trim(input('type'));
            $userinfo = $this->userInfo;
            if (!$type || !$userinfo['id']) {
                $ret = ['code' => 0, 'msg' => '参数错误!'];
            } else {
                $file = request()->file('file');
                if ($file) {
                    $info = $file->validate(['size' => 5242880, 'ext' => 'jpg,jpeg,png,gif'])->move(ROOT_PATH . 'public' . DS . 'upload/' . $type . '/' . $userinfo['id'], true, true, 2);
                    if ($info) {
                        $link = '/upload/' . $type . '/' . $userinfo['id'] . '/' . $info->getSaveName();
                        return rtn(1, '上传成功!', $link);
                    } else {
                        return rtn(0, $file->getError());
                    }
                } else {
                    return rtn(0, '未上传!');
                }
            }
        }
    }

    //卖家举报
    public function report_order()
    {
        $data = input('post.');
        if (!$data['order_id'] || !$data['report_content'] || !$data['report_img']) {
            return rtn(0, '参数错误!');
        } else {
            $order = db('order')->where('id', $data['order_id'])->find();
            if ($order['order_status'] != 2) {
                return rtn(0, '订单状态不正确!');
            } else {
                if ($order['time']) {
                    $update['time_passed'] = time() - $order['time'];
                } else {
                    $update['time_passed'] = time() - $order['pay_time'];
                }
                $update['order_status'] = 5;
                $update['report_content'] = $data['report_content'];
                $update['report_img'] = $data['report_img'];
                db('order')->where('id', $data['order_id'])->update($update);
                return rtn(1, lang('success'));
            }
        }
    }

    //卖家举报撤销
    public function report_revoke()
    {
        $data = input('post.');
        if (!$data['order_id']) {
            return rtn(0, '参数错误!');
        } else {
            $order = db('order')->where('id', $data['order_id'])->find();
            if ($order['order_status'] != 5) {
                return rtn(0, '订单状态不正确!');
            } else {
                $update['time'] = time() - $order['time_passed'];
                $update['order_status'] = 2;
                $update['report_content'] = '';
                $update['report_img'] = '';
                db('order')->where('id', $data['order_id'])->update($update);
                return rtn(1, lang('success'));
            }
        }
    }
}